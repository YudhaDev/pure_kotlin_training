/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.xndrive.first_try

import java.util.Arrays
import com.andreapivetta.kolor.*
import com.google.gson.Gson
import WhenSwitchCaseTraining
import LoopTraining
import DataClassTraining
import DataClassTrainingInit
import FunctionalProgrammingTraining

fun main(args: Array<String>) {

    val debugTraining1 = false
    val debugTraining2 = false
    val debugTraining3 = true

    if(debugTraining1){
        println(App().greeting)
        App().showSomeAmazingWords()
        print(App().sebuahFungsiYangUnik("Nama saya Yudha", "dan saya suka coding")+"\n")
        App().sebuahFungsiYangBiasa("Halo saya Adi")
    
        App().sebuahFungsiDebuggingTipeData()
        App().readAbleNumberTest()
        App().bermainDenganArray()
    
        App().bermainDenganSafeNull()
        App().bermainDenganStringTemplate()
    
        EnumTry().printEnumBasic()
    } else if (debugTraining2){
        // WhenSwitchCaseTraining().basicWhen()
        // println(WhenSwitchCaseTraining().savingWhen())

        // LoopTraining().rangedLoop()

        var seorangMurid = DataClassTraining("Sunaookami Shiroko", 16, "Riding, Sports")
        var seorangMurid2 = DataClassTraining("Sunaookami Shiroko", 16, "Gowes, Olahraga")
        var seorangMurid3 = DataClassTraining("Sunaookami Shiroko", 16, "Riding, Sports")

        val muridAbydos = DataClassTrainingInit().muridAbydos

        // println("Keluaran training data class: ")
        // println(seorangMurid.toString())
        // println("Keluaran training data class dalam list: ")
        // println(muridAbydos.toString())

        //mencoba merubah ke json
        //referensi: https://www.bezkoder.com/kotlin-parse-json-gson/
        val gson = Gson()
        var jsonSeorangMurid = gson.toJson(seorangMurid)
        var jsonMuridAbydos = gson.toJson(muridAbydos)
        println("Hasil konversi ke JSON: $jsonSeorangMurid")
        println("Hasil konversi ke JSON: $jsonMuridAbydos")
        println("Hasil equals: ${seorangMurid.equals(seorangMurid2)}")
        println("Hasil equals: ${seorangMurid.equals(seorangMurid3)}")
        println("Percobaan Clone: ")
        var variable_kosong: DataClassTraining? = null
        var variable_kosong2: DataClassTraining? = null

        //percobaan tanpa clone
        variable_kosong = muridAbydos[0]
        variable_kosong.nama += " (ini tambahan luar)"
        println("nilai variable kosong: ${variable_kosong.toString()}")
        println("nilai listawal: ${muridAbydos[0].toString()}") //ini harusnya juga berubah

        //jika list awal tidak ingin berubah maka pakai copy()
        variable_kosong2 = muridAbydos[1].copy(nama = muridAbydos[1].nama + "(ini perubahan dari copy)") //copy juga bisa untuk memodifikasi variable juga
        variable_kosong2.nama += " (ini tambahan dari luar)"
        println("nilai variable kosong2: ${variable_kosong2.toString()}")
        println("nilai listawal: ${muridAbydos[1].toString()}") //ini harusnya tidak berubah

        //percobaan akses variable data class dengan komponen
        //selain dengan menggunakan nama variable, akses variable data class bisa juga dengan menggunakan component
        println("Percobaan akses variable data class: ${muridAbydos[0].component1()}")
        println("Percobaan akses variable data class: ${muridAbydos[0].component2()}")
        println("Percobaan akses variable data class: ${muridAbydos[0].component3()}")
        //component-N akan bertambah secara otomatis dengan variable data class

        //percobaan Set
        var set_variable = DataClassTrainingInit().namaSekolah
        DataClassTrainingInit().manipulasiLanjut()
        println("Hasil keluaran percobaan set: ${set_variable.toString()}")

        //percobaan Map
        var map_variable = DataClassTrainingInit().muridRandom
        map_variable.put("Hina", "Gehenna2") //ini akan mengganti key yang ada dengan value baru

        println("Output percobaan map")
        println(map_variable.toString())
        println(map_variable.keys)
        println(map_variable.values)
        println(map_variable.get("Hina"))

        //percobaan collection operation
        val muridAbydos2: MutableList<DataClassTraining> = ArrayList() 
        muridAbydos2.addAll(muridAbydos)

        println("==Percobaan collection operation")
        val sorted = muridAbydos2.sortedByDescending { it.umur }
        var listMapped= sorted.map { it.nama + ""} //map digunakan jika kita ingin membuat list baru yang mana kita ingin merubah isi dari variable elemennya saat pembuatan
        sorted.forEach { println(it) }
        val sumresult = muridAbydos2.sumBy { it.umur }
        println(sumresult)
        println(sorted.first())
        println(sorted.last())
        println("Kembalian dengan find: "+sorted.find { it.nama.contains("Shi", ignoreCase = true)}) //hanya mengembalikan satu elemen yang ditemukan awal-awal
        println("Kembalian dengan filter: "+sorted.filter { it.nama.contains("Shi", ignoreCase = true) }) //mengembalikan semua elemen yang sesuai dengan kondisi
        println("Kembalian dengan filter-not: "+sorted.filterNot { it.nama.contains("Shi", ignoreCase = true) }) //mengembalikan semua elemen yang tidak sesuai dengan kondisi
        println("Isi dari listMapped: ${(listMapped as List<DataClassTraining>).toString()}")
    } else if (debugTraining3){
        FunctionalProgrammingTraining().debuggingFunctionalProgramming()
        FunctionalProgrammingTraining().debuggingExtensionFunctionAndProperties()
    }
    

}

class App {
    val greeting: String
        get() {
            return "Hello world."
        }
    var sebuahSapaanYangRamah: String = "Selamat Pagi"
    val sebuahBarisYangRapi: String =
            """
        Baris 1
        Baris 2
        Baris 3
        Baris 4
        Baris 5
    
    """.trimIndent()

    fun sebuahFungsiYangBiasa(words: String) {
        println("Ini output dari Fungsi yang Biasa: $words") // atau bisa dengan cara dibawah
        println("Ini output dari Fungsi yang Biasa II: " + words)
        println("")

    }
    fun sebuahFungsiYangUnik(words: String, wordsII: String) =
            "Ini merupakan hasil output dari Fungsi yang Unik: $words, $wordsII \n"

    fun showSomeAmazingWords() {
        print("Hello Kotlin\n")
        println("Mari belajar Kotlin bersama")
        print(sebuahSapaanYangRamah + " dan " + "Tetap semangat jangan menyerah. \n")
        println("Ini output dari Baris yang Rapi: \n" + sebuahBarisYangRapi)
        println("")

    }

    fun sebuahFungsiDebuggingTipeData(){
        println("Nilai maksimal int: "+Int.MAX_VALUE)
        println("Nilai minimum int: "+Int.MIN_VALUE)
        println("Nilai maksimal double: "+Double.MAX_VALUE)
        println("Nilai minimum int: "+Double.MIN_VALUE)
        println("")

    }

    fun readAbleNumberTest(){
        val readable_number = 1_100_999_21_1
        println("Output dari Readable Number Test: "+readable_number.toString()+" yang merupakan tipe data dari: "+readable_number::class.java.typeName)
        println("")

    }

    fun bermainDenganArray(){
        val arrCampuran = arrayOf(1,3,6, "a", "d", 9.1)
        val arrInt = intArrayOf(1,2,3,4,5,6)
        val arrDenganLambda = Array(10) { a -> a+1+15 }

        println("Output dari bermain dengan Array:")
        println(Arrays.toString(arrCampuran))
        println(Arrays.toString(arrInt))
        println(Arrays.toString(arrDenganLambda))
        println("")
    }

    fun bermainDenganSafeNull(){
        var sebuah_variable_nullable : String? = null
        var sebuah_variable_non_null : Int = sebuah_variable_nullable?.length ?: 10 //defaultnya 10 kalo null

        // sebuah_variable_nullable = "Bola adalah teman"

        println("Output dari fungsi bermain dengan safe null")
        println(sebuah_variable_nullable)
        println(sebuah_variable_non_null)
        println(sebuah_variable_nullable?.length)
        println(sebuah_variable_nullable?.length?:10)

        println("")

    }

    fun bermainDenganStringTemplate() {
        var jam = 7

        println("Toko sedang ${if(jam >7) "tutup" else "buka"}")
        // print("Office ${if (jam > 7) "already close" else "is open"}")
        println("")
    }
}

class EnumTry{
    fun printEnumBasic(){
        println("Hasil output dari Enum Training".yellow())

        //cara tradisional
        // println(Kolor.foreground("Ini text warna merah dari kelas enum${EnumTraining.MERAH}.", Color.RED))
        // println(Kolor.foreground("Ini text warna merah dari kelas enum${EnumTraining.HIJAU}.", Color.GREEN))
        // println(Kolor.foreground("Ini text warna merah dari kelas enum${EnumTraining.BIRU}.", Color.BLUE))

        //cara pakai abstract di enum classnya
        EnumTraining.MERAH.printValue()
        EnumTraining.HIJAU.printValue()
        EnumTraining.BIRU.printValue()

        println(Arrays.toString(EnumTraining.values()))
        
    }
}

enum class EnumTraining(val warna : Int) {
    MERAH(0xFF0000){
        override fun printValue() {
            println(Kolor.foreground("Ini text warna merah dari kelas enum $MERAH = $warna.", Color.RED))
        }
    },
    HIJAU(0x00FF00){
        override fun printValue() {
            println(Kolor.foreground("Ini text warna merah dari kelas enum $HIJAU = $warna.", Color.GREEN))
        }
    },
    BIRU(0x0000FF){
        override fun printValue() {
            println(Kolor.foreground("Ini text warna merah dari kelas enum $BIRU = $warna.", Color.BLUE))
        }
    };

    abstract fun printValue()
}


